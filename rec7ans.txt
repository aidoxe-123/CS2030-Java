2/
class Pair {
   int a = 0;
   int b = 0;
   Pair(int a, int b) {
      this.a = a;
      this.b = b;
   }
   int increase() {
	int temp = this.b;
	this.b = this.a;
	this.a += temp;
	return this.b;
   }
}
Stream<Integer> nFibo(int n) {
	Pair myPair = new Pair(1,0);
	return IntStream
              .range(0,n)
              .map(x -> myPair.increase())
              .mapToObj(x -> (Integer) x);
}

3/
public static <T, U, R> Stream<R> product(List<? extends T> list1,
	List<? extends U> list2,
	BiFunction<? super T, ? super U, R> func) {
	return IntStream
	      .range(0, list1.size())
              .mapToObj(x -> list1.get(x))
	      .flatMap(
		x -> IntStream
		    .range(0, list2.size())
		    .mapToObj(y -> func.apply(x, list2.get(y)))
		);
}